{"ast":null,"code":"import _objectSpread from \"/Users/ict/web-projects/demo-ecommerce/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInFailure, signInSuccess, signOutSuccess, signOutFailure, signUpFailure, signUpSuccess } from './user.actions';\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* getSnapshotFromUserAuth(user) {\n  try {\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data()))); //console.log(userRef)\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          user = _ref.user;\n\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data())));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data())));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* signUp(payload) {\n  console.log(payload);\n\n  if (password !== confirmPassword) {\n    alert(\"passwords don't match\");\n    return;\n  } //await createUserProfileDocument(user, { displayName });\n\n\n  try {\n    const _ref3 = yield auth.createUserWithEmailAndPassword(email, password),\n          user = _ref3.user;\n\n    yield call(createUserProfileDocument, user, {\n      displayName\n    });\n    yield put(signUpSuccess());\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\n\nfunction* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart)]);\n}","map":{"version":3,"sources":["/Users/ict/web-projects/demo-ecommerce/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInFailure","signInSuccess","signOutSuccess","signOutFailure","signUpFailure","signUpSuccess","signOut","error","getSnapshotFromUserAuth","user","userRef","userSnapshot","get","id","data","isUserAuthenticated","userAuth","signInWithGoogle","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","signUp","console","log","confirmPassword","alert","createUserWithEmailAndPassword","displayName","onCheckUserSession","CHECK_USER_SESSION","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects'\nimport UserActionTypes from './user.types'\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils'\n\nimport { signInFailure, signInSuccess, signOutSuccess, signOutFailure, signUpFailure, signUpSuccess } from './user.actions'\n\nexport function* signOut() {\n  try {\n    yield auth.signOut()\n    yield put(signOutSuccess())\n  } catch (error) {\n    yield put(signOutFailure(error))\n  }\n}\n\nexport function* getSnapshotFromUserAuth(user) {\n  try {\n    const userRef = yield call(createUserProfileDocument, user)\n    const userSnapshot = yield userRef.get()\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\n    //console.log(userRef)\n  } catch (error) {\n    yield put(signInFailure(error))\n  }\n}\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser()\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth)\n  } catch (error) {\n    yield put(signInFailure(error))\n  }\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider)\n    const userRef = yield call(createUserProfileDocument, user)\n    const userSnapshot = yield userRef.get()\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\n  } catch (error) {\n    yield put(signInFailure(error))\n  }\n  \n}\n\nexport function* signInWithEmail({payload: {email, password}}) {\n  \n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password)\n    const userRef = yield call(createUserProfileDocument, user)\n    const userSnapshot = yield userRef.get()\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\n  } catch (error) {\n    yield put(signInFailure(error))\n  }\n}\n\nfunction* signUp(payload) {\n  console.log(payload)\n  if (password !== confirmPassword) {\n      alert(\"passwords don't match\");\n      return;\n    }\n\n\n      //await createUserProfileDocument(user, { displayName });\n  try {\n    const { user } = yield auth.createUserWithEmailAndPassword(\n      email,\n      password\n    );\n    yield call(createUserProfileDocument, user, {displayName} )\n    yield put(signUpSuccess())\n  } catch (error) {\n    yield put(signUpFailure(error))\n  }\n}\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut)\n}\nfunction* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp)\n}\n\n\nexport function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n    call(onSignOutStart),\n    call(onSignUpStart)\n  ])\n}"]},"metadata":{},"sourceType":"module"}